# .github/workflows/update-readme.yml

name: Update README with Version

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push events but only for the build.yaml file
  push:
    paths:
      - 'trillium/build.yaml'

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Parse version from build.yaml
      id: parse_version
      run: |
        # This command finds the line with 'amd64:', splits it by the ':' delimiter,
        # takes the third part (the version string), and trims any whitespace.
        # We use a relative path which is more robust.
        VERSION=$(grep 'amd64:' trillium/build.yaml | awk -F ':' '{print $3}' | xargs)
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version extracted: $VERSION"

    - name: Update trillium/README.md with version and reorder text
      # This step only runs if a version was successfully extracted
      if: env.VERSION
      run: |
        README_PATH="trillium/README.md"
        CURRENT_TEXT_PATTERN="TriliumNext Notes for Home Assistant Version: VERSION_PLACEHOLDER"
        
        # Use sed to capture parts of the line and reorder them.
        # (.*) captures "TriliumNext Notes"
        # (Version:) captures "Version:"
        # (.*) captures the placeholder (or existing version)
        # (for Home Assistant) captures "for Home Assistant"
        # We then rearrange them in the replacement string.
        sed -i -E "s#(.*) (Version:) (.*) (for Home Assistant)#\1 \2 ${{ env.VERSION }} \4#g" "${README_PATH}"
        
        # Now, handle the specific reordering if the pattern is exactly "TriliumNext Notes for Home Assistant Version: VERSION_PLACEHOLDER"
        # This step will reorder the fixed string to the new desired format.
        # It's important to run this after the version insertion to ensure the version is present.
        sed -i -E "s#TriliumNext Notes (.*) for Home Assistant (Version: .*$)#TriliumNext Notes Version: \2 \1#g" "${README_PATH}"

        echo "${README_PATH} updated."


    - name: Commit changes
      # This step only runs if a version was extracted and the README file was modified.
      if: env.VERSION
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if there are changes to commit, specifically in trillium/README.md
        if ! git diff --quiet trillium/README.md; then
          echo "Changes detected in trillium/README.md. Committing..."
          git add trillium/README.md
          # Use the env context to access the version variable in the commit message
          git commit -m "Docs: Update README in trillium/ with version ${{ env.VERSION }}"
          git push
        else
          echo "No changes to commit."
        fi
